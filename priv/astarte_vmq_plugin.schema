{mapping, "astarte_vmq_plugin.amqp.username", "astarte_vmq_plugin.amqp_options.username", [
    {default, "guest"},
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.password", "astarte_vmq_plugin.amqp_options.password", [
    {default, "guest"},
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.host", "astarte_vmq_plugin.amqp_options.host", [
    {default, "localhost"},
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.port", "astarte_vmq_plugin.amqp_options.port", [
    {default, 5672},
    {datatype, integer}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.virtual_host", "astarte_vmq_plugin.amqp_options.virtual_host", [
    {default, "/"},
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.ssl_cacertfile", "astarte_vmq_plugin.amqp_options.ssl_options.cacertfile", [
    {datatype, file}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.ssl_certfile", "astarte_vmq_plugin.amqp_options.ssl_options.certfile", [
    {datatype, file}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.ssl_keyfile", "astarte_vmq_plugin.amqp_options.ssl_options.keyfile", [
    {datatype, file}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.ssl_verify", "astarte_vmq_plugin.amqp_options.ssl_options.verify", [
    {datatype, {enum, [verify_peer]}}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.ssl_fail_if_no_peer_cert", "astarte_vmq_plugin.amqp_options.ssl_options.fail_if_no_peer_cert", [
    {datatype, {enum, [true, false]}}
  ]}.

{mapping, "astarte_vmq_plugin.amqp_ssl.ssl_enabled", "astarte_vmq_plugin.amqp_ssl.ssl_enabled", [
    {datatype, {enum, [true, false]}},
    {default, false}
]}.

{mapping, "astarte_vmq_plugin.amqp_ssl.disable_sni", "astarte_vmq_plugin.amqp_ssl.disable_sni", [
    {datatype, {enum, [true, false]}},
    {default, false}
  ]}.

{mapping, "astarte_vmq_plugin.amqp_ssl.custom_sni", "astarte_vmq_plugin.amqp_ssl.custom_sni", [
    {datatype, string}
]}.

{mapping, "astarte_vmq_plugin.amqp.data_queue_prefix", "astarte_vmq_plugin.data_queue_prefix",
  [
    {default, "astarte_data_"},
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.data_queue_count", "astarte_vmq_plugin.data_queue_count",
  [
    {default, 128},
    {datatype, integer}
  ]}.

{mapping, "astarte_vmq_plugin.amqp.mirror_queue_name", "astarte_vmq_plugin.mirror_queue_name",
  [
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.device_heartbeat_interval_ms", "astarte_vmq_plugin.device_heartbeat_interval_ms",
  [
    {datatype, integer}
  ]}.

{mapping, "astarte_rpc.amqp_connection.username", "astarte_rpc.amqp_connection_options.username", [
    {datatype, string}
  ]}.

{mapping, "astarte_rpc.amqp_connection.password", "astarte_rpc.amqp_connection_options.password", [
    {datatype, string}
  ]}.

{mapping, "astarte_rpc.amqp_connection.host", "astarte_rpc.amqp_connection_options.host", [
    {datatype, string}
  ]}.

{mapping, "astarte_rpc.amqp_connection.port", "astarte_rpc.amqp_connection_options.port", [
    {datatype, integer}
  ]}.

{mapping, "astarte_rpc.amqp_connection.virtual_host", "astarte_rpc.amqp_connection_options.virtual_host", [
    {datatype, string}
  ]}.

{mapping, "astarte_vmq_plugin.registry_mfa", "astarte_vmq_plugin.registry_mfa",
  [
    {default, "{vmq_reg,direct_plugin_exports,[astarte_vmq_plugin]}"},
    {datatype, string},
    hidden
  ]}.

{translation, "astarte_vmq_plugin.registry_mfa",
  fun(Conf) ->
    S = cuttlefish:conf_get("astarte_vmq_plugin.registry_mfa", Conf),
    {ok, T, _} = erl_scan:string(S ++ "."),
    {ok, Term} = erl_parse:parse_term(T),
    Term
  end}.
